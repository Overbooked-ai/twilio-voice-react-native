buildscript {
  ext.versions = [
    'java'               : JavaVersion.VERSION_11,
    'androidGradlePlugin': '7.4.2',
    'googleServices'     : '4.3.10',
    'voiceAndroid'       : '6.7.1',
    'androidxCore'       : '1.10.1',
    'androidxLifecycle'  : '2.2.0',
    'audioSwitch'        : '1.1.8',
    'firebaseMessaging'  : '23.4.0',
    'kotlin'             : '1.9.24'
  ]
  if (project == rootProject) {
    repositories {
      google()
      mavenCentral()
    }

    dependencies {
      classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
      classpath "com.google.gms:google-services:${versions.googleServices}"
      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  namespace 'com.twiliovoicereactnative'
  compileSdk safeExtGet('TwilioVoiceReactNative_compileSdkVersion', 34)
  defaultConfig {
    minSdkVersion safeExtGet('TwilioVoiceReactNative_minSdkVersion', 23)
    targetSdkVersion safeExtGet('TwilioVoiceReactNative_targetSdkVersion', 34)
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility versions.java
    targetCompatibility versions.java
  }
  kotlinOptions {
    jvmTarget = versions.java.toString()
  }
  buildFeatures {
    // for buildconfig construction
    buildConfig true
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
    maven {
      url 'https://maven.google.com/'
      name 'Google'
    }
    // Primary Expo Maven repositories
    maven {
      url "$rootDir/../node_modules/expo/maven"
      name 'Expo Maven'
    }
    maven {
      url "$rootDir/../node_modules/expo-modules-core/maven"
      name 'Expo Modules Core Maven'
    }
    // Fallback to parent project's node_modules
    maven {
      url "${project.rootProject.projectDir}/../node_modules/expo/maven"
      name 'Expo Maven (root)'
    }
    maven {
      url "${project.rootProject.projectDir}/../node_modules/expo-modules-core/maven"
      name 'Expo Modules Core Maven (root)'
    }
    // Additional fallback paths
    maven {
      url "$rootDir/../../../node_modules/expo-modules-core/maven"
      name 'Expo Modules Core Maven (deep fallback)'
    }
    // FlatDir fallback for direct AAR access
    flatDir {
      dirs "${rootDir}/../node_modules/expo-modules-core/android/build/outputs/aar"
    }
  }
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"  // From node_modules
  implementation "com.twilio:voice-android:${versions.voiceAndroid}"
  implementation "androidx.core:core:${versions.androidxCore}"
  implementation "androidx.lifecycle:lifecycle-extensions:${versions.androidxLifecycle}"
  implementation "com.google.firebase:firebase-messaging:${versions.firebaseMessaging}"
  implementation "com.twilio:audioswitch:${versions.audioSwitch}"
  implementation 'com.google.android.material:material:1.1.0'
  
  // Pick the version that the host app already has (set by Expo prebuild)
  def expoCoreVersion = rootProject.ext.has('expoModulesCoreVersion')
        ? rootProject.ext.expoModulesCoreVersion
        : '2.0.0'           // fallback for bare RN users
  compileOnly("expo.modules:expo-modules-core:$expoCoreVersion")

  constraints {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
      because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
  }

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
}
