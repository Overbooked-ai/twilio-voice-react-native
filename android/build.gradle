buildscript {
  ext.versions = [
    'java'               : JavaVersion.VERSION_11,
    'androidGradlePlugin': '7.4.2',
    'googleServices'     : '4.3.10',
    'voiceAndroid'       : '6.7.1',
    'androidxCore'       : '1.10.1',
    'androidxLifecycle'  : '2.2.0',
    'audioSwitch'        : '1.1.8',
    'firebaseMessaging'  : '23.4.0',
    'kotlin'             : '1.9.24',
    'minSdk'             : 21,
    'compileSdk'         : 34,
    'targetSdk'          : 34
  ]
  
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
    classpath "com.google.gms:google-services:${versions.googleServices}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
  }
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-android"

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  namespace 'com.twiliovoicereactnative'
  compileSdkVersion safeExtGet('TwilioVoiceReactNative_compileSdkVersion', versions.compileSdk)
  
  defaultConfig {
    minSdkVersion safeExtGet('TwilioVoiceReactNative_minSdkVersion', versions.minSdk)
    targetSdkVersion safeExtGet('TwilioVoiceReactNative_targetSdkVersion', versions.targetSdk)
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  
  lintOptions {
    disable 'GradleCompatible'
  }
  
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }
  
  buildFeatures {
    buildConfig true
  }
  
  kotlinOptions {
    jvmTarget = '11'
  }
  
  // Disable task-specific errors that can occur in Expo builds
  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  }
}

repositories {
  google()
  mavenCentral()
  
  // Add Expo Maven repository
  maven {
    url "$rootDir/../node_modules/expo-modules-core/android/maven"
  }
  
  // Add JitPack repository for Expo modules
  maven {
    url "https://www.jitpack.io"
  }
  
  // Add the correct Expo modules repository
  maven {
    url "$rootDir/../node_modules/expo-modules-core/android/maven"
  }
}

dependencies {
  // React Native dependency
  implementation "com.facebook.react:react-native:+"  // From node_modules
  
  // Twilio Voice Android SDK
  implementation "com.twilio:voice-android:${versions.voiceAndroid}"
  
  // AndroidX dependencies
  implementation "androidx.core:core:${versions.androidxCore}"
  implementation "androidx.lifecycle:lifecycle-extensions:${versions.androidxLifecycle}"
  
  // Firebase dependencies for push notifications
  implementation "com.google.firebase:firebase-messaging:${versions.firebaseMessaging}"
  
  // Audio management
  implementation "com.twilio:audioswitch:${versions.audioSwitch}"
  
  // Expo modules support - using the correct implementation
  implementation project(':expo-modules-core')
  
  // Material design components
  implementation 'com.google.android.material:material:1.6.0'

  // Kotlin stdlib compatibility
  constraints {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
      because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
  }
}

// Generate resources fix - a more efficient approach without trying to configure tasks directly
afterEvaluate {
  // Add a simple property to indicate we're handling resource dependency in a non-standard way
  ext.set("resourceDependencyHandledManually", true)
  
  ["Debug", "Release"].each { buildType ->
    // Access the tasks using a safer relative path reference that's less likely to break
    def packageResourcesTask = tasks.findByName("package${buildType}Resources")
    def generateResValuesTask = tasks.findByName("generate${buildType}ResValues")
    
    if (packageResourcesTask != null && generateResValuesTask != null) {
      packageResourcesTask.dependsOn(generateResValuesTask)
    }
  }
}

// Custom handling for task execution order
project.gradle.taskGraph.whenReady { graph ->
  graph.allTasks.findAll { it.name.matches("package(Debug|Release)Resources") }.each { task ->
    def buildType = task.name.contains("Debug") ? "Debug" : "Release"
    def genTask = tasks.findByName("generate${buildType}ResValues")
    if (genTask != null) {
      task.mustRunAfter(genTask)
    }
  }
}

// Handle hyphenated module names (special compatibility for Expo)
gradle.projectsEvaluated {
  tasks.all { task ->
    if (task.path.contains('twilio-voice-react-native-sdk') || task.path.contains('twilio_voice-react-native-sdk')) {
      // Fix any potential circular dependencies
      task.dependsOn = task.dependsOn.findAll { dep -> 
        dep != null && !dep.toString().contains(task.path) 
      }
    }
  }
}

