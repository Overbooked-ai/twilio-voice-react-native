buildscript {
  ext.versions = [
    'java'               : JavaVersion.VERSION_11,
    'androidGradlePlugin': '7.4.2',
    'googleServices'     : '4.3.10',
    'voiceAndroid'       : '6.7.1',
    'androidxCore'       : '1.10.1',
    'androidxLifecycle'  : '2.2.0',
    'audioSwitch'        : '1.1.8',
    'firebaseMessaging'  : '23.4.0',
    'kotlin'             : '1.9.24',
    minSdk: 21,
    compileSdk: 34,
    targetSdk: 34
  ]
  if (project == rootProject) {
    repositories {
      google()
      mavenCentral()
    }

    dependencies {
      classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
      classpath "com.google.gms:google-services:${versions.googleServices}"
      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
  }
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-android"

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  namespace 'com.twiliovoicereactnative'
  compileSdk safeExtGet('TwilioVoiceReactNative_compileSdkVersion', 34)
  defaultConfig {
    minSdkVersion safeExtGet('TwilioVoiceReactNative_minSdkVersion', 23)
    targetSdkVersion safeExtGet('TwilioVoiceReactNative_targetSdkVersion', 34)
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility versions.java
    targetCompatibility versions.java
  }
  buildFeatures {
    // for buildconfig construction
    buildConfig true
  }
  kotlinOptions {
    jvmTarget = '17'
  }
}

repositories {
  google()
  mavenCentral()
  maven {
    url 'https://maven.google.com/'
    name 'Google'
  }
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"  // From node_modules
  implementation "com.twilio:voice-android:${versions.voiceAndroid}"
  implementation "androidx.core:core:${versions.androidxCore}"
  implementation "androidx.lifecycle:lifecycle-extensions:${versions.androidxLifecycle}"
  implementation "com.google.firebase:firebase-messaging:${versions.firebaseMessaging}"
  implementation "com.twilio:audioswitch:${versions.audioSwitch}"
  implementation 'com.google.android.material:material:1.1.0'

  constraints {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
      because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
  }
}

// SAFER GRADLE TASK DEPENDENCY FIX - USING TASK GRAPH HOOKS
// This addresses the issue with task dependencies without trying to directly configure tasks
gradle.taskGraph.whenReady { taskGraph ->
  println("TWILIO VOICE SDK: Applying safer Gradle task dependency fix using task graph hooks")
  
  // Process all tasks in the graph to find resource tasks
  taskGraph.allTasks.each { task ->
    def taskPath = task.path
    
    // Look for packageDebugResources and packageReleaseResources tasks
    if (taskPath.contains("packageDebugResources") || taskPath.contains("packageReleaseResources")) {
      // Find corresponding generate tasks
      def prefix = taskPath.substring(0, taskPath.lastIndexOf(':') + 1)
      def buildType = taskPath.contains("Debug") ? "Debug" : "Release"
      def generateResValuesPath = "${prefix}generate${buildType}ResValues"
      
      // Set up task dependency if the generate task exists
      def generateTask = taskGraph.allTasks.find { it.path == generateResValuesPath }
      if (generateTask != null) {
        println("TWILIO VOICE SDK: Adding dependency - ${taskPath} depends on ${generateResValuesPath}")
        task.dependsOn(generateTask)
      }
    }
  }
}

// Add custom Gradle property to disable implicit dependency validation
ext.android.disableImplicitDependencyValidation = true

// Add a property in the Android extension to serve the same purpose
android.aaptOptions.additionalParameters = [
  "--warn-manifest-validation",
  "--no-version-vectors"
]
