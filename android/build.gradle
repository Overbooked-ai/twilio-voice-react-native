buildscript {
  ext.versions = [
    'java'               : JavaVersion.VERSION_11,
    'androidGradlePlugin': '7.4.2',
    'googleServices'     : '4.3.10',
    'voiceAndroid'       : '6.7.1',
    'androidxCore'       : '1.10.1',
    'androidxLifecycle'  : '2.2.0',
    'audioSwitch'        : '1.1.8',
    'firebaseMessaging'  : '23.4.0',
    'kotlin'             : '1.9.24'
  ]
  if (project == rootProject) {
    repositories {
      google()
      mavenCentral()
    }

    dependencies {
      classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
      classpath "com.google.gms:google-services:${versions.googleServices}"
      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
  }
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-android"

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  namespace 'com.twiliovoicereactnative'
  compileSdk safeExtGet('TwilioVoiceReactNative_compileSdkVersion', 34)
  defaultConfig {
    minSdkVersion safeExtGet('TwilioVoiceReactNative_minSdkVersion', 23)
    targetSdkVersion safeExtGet('TwilioVoiceReactNative_targetSdkVersion', 34)
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility versions.java
    targetCompatibility versions.java
  }
  buildFeatures {
    // for buildconfig construction
    buildConfig true
  }
}

repositories {
  google()
  mavenCentral()
  maven {
    url 'https://maven.google.com/'
    name 'Google'
  }
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"  // From node_modules
  implementation "com.twilio:voice-android:${versions.voiceAndroid}"
  implementation "androidx.core:core:${versions.androidxCore}"
  implementation "androidx.lifecycle:lifecycle-extensions:${versions.androidxLifecycle}"
  implementation "com.google.firebase:firebase-messaging:${versions.firebaseMessaging}"
  implementation "com.twilio:audioswitch:${versions.audioSwitch}"
  implementation 'com.google.android.material:material:1.1.0'

  constraints {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
      because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
  }
}

// COMPREHENSIVE FIX FOR GRADLE TASK DEPENDENCIES
// This addresses the issue with ':twilio_voice-react-native-sdk:packageDebugResources' using 
// output from ':twilio-voice-react-native-sdk:generateDebugResValues' without declaring dependency
project.afterEvaluate {
    project.logger.quiet("TWILIO VOICE SDK: Applying comprehensive Gradle task fix")
    
    // Get all Android build variants (debug, release, etc.)
    if (android.hasProperty('applicationVariants')) {
        android.applicationVariants.all { applyTaskDependencyFix(it) }
    } else if (android.hasProperty('libraryVariants')) {
        android.libraryVariants.all { applyTaskDependencyFix(it) }
    }
    
    // Apply fix using multiple approaches for all possible task name patterns
    def taskNames = ['generate', 'package']
    def buildTypes = ['Debug', 'Release']
    def resourceTypes = ['ResValues', 'Resources']
    
    // Handle both naming patterns ('_' and '-') 
    def moduleNamePatterns = [
        'twilio_voice-react-native-sdk', 
        'twilio-voice-react-native-sdk'
    ]
    
    buildTypes.each { buildType ->
        resourceTypes.each { resType ->
            moduleNamePatterns.each { modulePattern ->
                def genTaskName = ":${modulePattern}:generate${buildType}${resType}"
                def pkgTaskName = ":${modulePattern}:package${buildType}${resType}"
                
                try {
                    def genTask = tasks.findByPath(genTaskName)
                    def pkgTask = tasks.findByPath(pkgTaskName) 
                    
                    if (genTask != null && pkgTask != null) {
                        project.logger.quiet("TWILIO VOICE SDK: Found tasks - ${genTaskName} and ${pkgTaskName}")
                        
                        // Method 1: Direct dependsOn
                        pkgTask.dependsOn(genTask)
                        
                        // Method 2: Input/Output relationship
                        if (genTask.hasProperty('outputs') && genTask.outputs.hasProperty('files')) {
                            def outputFiles = genTask.outputs.files
                            if (outputFiles != null && !outputFiles.isEmpty()) {
                                def outputDir = outputFiles.singleFile
                                if (outputDir != null) {
                                    pkgTask.inputs.dir(outputDir).withPathSensitivity(PathSensitivity.RELATIVE)
                                    project.logger.quiet("TWILIO VOICE SDK: Configured input/output relationship for ${pkgTaskName}")
                                }
                            }
                        }
                        
                        // Method 3: mustRunAfter (as a fallback)
                        pkgTask.mustRunAfter(genTask)
                    }
                } catch (Exception e) {
                    project.logger.quiet("TWILIO VOICE SDK: Exception handling tasks ${genTaskName} and ${pkgTaskName}: ${e.message}")
                }
            }
        }
    }
}

// Helper method to apply fix to a specific variant
def applyTaskDependencyFix(variant) {
    try {
        def variantName = variant.name.capitalize()
        def generateResValuesTask = tasks.findByName("generate${variantName}ResValues")
        def packageResourcesTask = tasks.findByName("package${variantName}Resources")
        
        if (generateResValuesTask != null && packageResourcesTask != null) {
            project.logger.quiet("TWILIO VOICE SDK: Found variant tasks - generate${variantName}ResValues and package${variantName}Resources")
            
            // Method 1: Direct dependsOn
            packageResourcesTask.dependsOn(generateResValuesTask)
            
            // Method 2: Input/Output relationship
            def outputFiles = generateResValuesTask.outputs.files
            if (outputFiles != null && !outputFiles.isEmpty()) {
                try {
                    def outputDir = outputFiles.singleFile
                    if (outputDir != null) {
                        packageResourcesTask.inputs.dir(outputDir).withPathSensitivity(PathSensitivity.RELATIVE)
                        project.logger.quiet("TWILIO VOICE SDK: Configured input/output relationship for ${variantName}")
                    }
                } catch (Exception e) {
                    project.logger.quiet("TWILIO VOICE SDK: Could not access output directory: ${e.message}")
                }
            }
            
            // Method 3: mustRunAfter (as a fallback)
            packageResourcesTask.mustRunAfter(generateResValuesTask)
        }
    } catch (Exception e) {
        project.logger.quiet("TWILIO VOICE SDK: Exception in applyTaskDependencyFix: ${e.message}")
    }
}
