buildscript {
  ext.versions = [
    'java'               : JavaVersion.VERSION_11,
    'androidGradlePlugin': '7.4.2',
    'googleServices'     : '4.3.10',
    'voiceAndroid'       : '6.7.1',
    'androidxCore'       : '1.10.1',
    'androidxLifecycle'  : '2.2.0',
    'audioSwitch'        : '1.1.8',
    'firebaseMessaging'  : '23.4.0',
    'kotlin'             : '1.9.24',
    'minSdk'             : 21,
    'compileSdk'         : 34,
    'targetSdk'          : 34
  ]
  if (project == rootProject) {
    repositories {
      google()
      mavenCentral()
    }

    dependencies {
      classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
      classpath "com.google.gms:google-services:${versions.googleServices}"
      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
  }
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-android"

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  namespace 'com.twiliovoicereactnative'
  compileSdkVersion safeExtGet('TwilioVoiceReactNative_compileSdkVersion', versions.compileSdk)
  
  defaultConfig {
    minSdkVersion safeExtGet('TwilioVoiceReactNative_minSdkVersion', versions.minSdk)
    targetSdkVersion safeExtGet('TwilioVoiceReactNative_targetSdkVersion', versions.targetSdk)
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  
  lintOptions {
    disable 'GradleCompatible'
  }
  
  compileOptions {
    sourceCompatibility versions.java
    targetCompatibility versions.java
  }
  
  buildFeatures {
    buildConfig true
  }
  
  kotlinOptions {
    jvmTarget = '11'
  }
}

repositories {
  google()
  mavenCentral()
  // Add jcenter() for older Expo modules support
  jcenter()
  // Add Expo repository
  maven {
    url "$rootDir/../node_modules/expo/node_modules/expo-modules-core/android/maven"
  }
  maven {
    url "$rootDir/../node_modules/expo-modules-core/android/maven"
  }
}

dependencies {
  // React Native dependency
  implementation "com.facebook.react:react-native:+"  // From node_modules
  
  // Twilio Voice Android SDK
  implementation "com.twilio:voice-android:${versions.voiceAndroid}"
  
  // AndroidX dependencies
  implementation "androidx.core:core:${versions.androidxCore}"
  implementation "androidx.lifecycle:lifecycle-extensions:${versions.androidxLifecycle}"
  
  // Firebase dependencies for push notifications
  implementation "com.google.firebase:firebase-messaging:${versions.firebaseMessaging}"
  
  // Audio management
  implementation "com.twilio:audioswitch:${versions.audioSwitch}"
  
  // Expo modules support - updated to use the correct coordinates
  implementation 'expo.modules.core:core:+'
  
  // Material design components
  implementation 'com.google.android.material:material:1.6.0'

  // Kotlin stdlib compatibility
  constraints {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
      because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
      because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
    }
  }
}

// Make sure the resources task gets executed before packaging resources
afterEvaluate {
  android.buildTypes.each { buildType ->
    def buildTypeName = buildType.name.capitalize()
    
    // Generate task names for packageResources and generateResValues
    def packageResourcesTaskName = "package${buildTypeName}Resources"
    def generateResValuesTaskName = "generate${buildTypeName}ResValues"
    
    // Add dependency only if both tasks exist
    if (tasks.findByName(packageResourcesTaskName) != null && 
        tasks.findByName(generateResValuesTaskName) != null) {
      tasks.named(packageResourcesTaskName).configure {
        dependsOn(tasks.named(generateResValuesTaskName))
      }
    }
  }
}

// Disabling implicit dependency validation to avoid task graph issues
gradle.projectsEvaluated {
  tasks.withType(com.android.build.gradle.internal.tasks.AndroidVariantTask) { task ->
    task.dependsOn = task.dependsOn.findAll { 
      it != null && it.toString() != 'null' 
    }
  }
}

